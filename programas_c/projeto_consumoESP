#include "ACS712.h"
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include <UniversalTelegramBot.h>

#define BOTtoken "***************************************"
#define id_usuario "******************"

const char* ssid = "********************";
const char* senha = "*******************";

WiFiClientSecure client;
UniversalTelegramBot bot(BOTtoken, client);

ACS712  ACS(34, 5, 4095, 185);

String estado_modo = "off"; // modo de medição
float corrente_mA = 0, potencia = 0, potencia_acumu = 0, kw_hora = 0;
unsigned long tempo_inicio = 0, tempo_total = 0, tempo_ref = 0;
unsigned long tempo_verifica_wifi = 0;

String id, text;

// Setup
void setup() {
  Serial.begin(9600);
  ACS.autoMidPoint();
  WiFi.mode(WIFI_STA);
  connect();
  client.setCACert(TELEGRAM_CERTIFICATE_ROOT);
}

// Loop principal
void loop() {
  corrente_mA = ACS.mA_AC();
  potencia = 127 * (corrente_mA / 1000.0);
  Serial.println(corrente_mA);
  // Acumula potência se medição estiver ativa
  if (estado_modo == "on") {
    unsigned long tempo_atual = millis();
    float tempo_passado_seg = (tempo_atual - tempo_ref) / 1000.0;
    tempo_ref = tempo_atual;

    // Acumulando energia: Potência * tempo(segundos)
    potencia_acumu += potencia * (tempo_passado_seg / 3600.0); // converte para kWh
  }


  if (millis() - tempo_verifica_wifi > 5000) {
    connect();
    tempo_verifica_wifi = millis();
  }

  readTel();

  delay(500); // intervalo
}

void connect() {
  if (WiFi.status() != WL_CONNECTED) {
    WiFi.begin(ssid, senha);
    delay(2000);
  }
}

// Leitura de comandos do Telegram
void readTel() {
  static String ult_estado = "off";

  int newmsg = bot.getUpdates(bot.last_message_received + 1);
  if (newmsg == 0) return;

  for (int i = 0; i < newmsg; i++) {
    id = bot.messages[i].chat_id;
    text = bot.messages[i].text;
    text.toUpperCase();

    if (id != id_usuario) {
      bot.sendMessage(id, "Acesso não autorizado.");
      return;
    }

    if (text == "/START") {
      String menu = "***Projeto Medidor de Consumo***\n";
      menu += "[/p] Potência instantânea\n";
      menu += "[/c] Corrente instantânea\n";
      menu += "[/on] Iniciar medição\n";
      menu += "[/off] Encerrar medição\n";
      menu += "[/start] Mostrar menu\n";
      bot.sendMessage(id, menu);
    }

    else if (text == "/C") {
      bot.sendMessage(id, "Corrente: " + String(corrente_mA, 2) + " mA");
    }

    else if (text == "/P") {
      bot.sendMessage(id, "Potência: " + String(potencia, 2) + " W");
    }

    else if (text == "/ON") {
      if (estado_modo != "on") {
        estado_modo = "on";
        tempo_inicio = millis();
        tempo_ref = millis();
        potencia_acumu = 0;
        bot.sendMessage(id, "✅ Medição iniciada.");
      } else {
        bot.sendMessage(id, "⚠️ Medição já está em andamento.");
      }
    }

    else if (text == "/OFF") {
      if (estado_modo == "on") {
        estado_modo = "off";
        tempo_total = (millis() - tempo_inicio) / 1000;

        kw_hora = potencia_acumu;

        bot.sendMessage(id, "⏹️ Medição encerrada.");
        bot.sendMessage(id, "⏱️ Tempo de medição: " + String(tempo_total) + " segundos");
        bot.sendMessage(id, "⚡ Energia consumida: " + String(kw_hora, 6) + " kWh");
        // Reset para próxima medição
        potencia_acumu = 0;
        tempo_total = 0;
        kw_hora = 0;
      } else {
        bot.sendMessage(id, "⚠️ Nenhuma medição em andamento.");
      }
    }

    else {
      bot.sendMessage(id, "❌ Comando inválido!");
    }
  }
}
